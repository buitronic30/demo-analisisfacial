// 1. Variables globales (conectadas a tu HTML)
const video = document.getElementById('videoInput');
const captureBtn = document.getElementById('captureBtn');
let model = null;
let isLoading = false;

// 2. Función para INICIAR LA CÁMARA (optimizada para tablets)
async function startCamera() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: 320,  // Resolución baja para mejor rendimiento
                height: 240,
                facingMode: 'user'  // Cámara frontal
            }
        });
        video.srcObject = stream;
        video.play();  // Forzar reproducción en algunos dispositivos
    } catch (err) {
        console.error("🚨 Error al activar la cámara:", err);
        alert("No se pudo acceder a la cámara. Asegúrate de dar permisos y usa Chrome/Firefox.");
    }
}

// 3. Función para CARGAR EL MODELO DE IA
async function loadModel() {
    try {
        isLoading = true;
        console.log("⏳ Cargando modelo de IA...");
        
        // Modelo ligero para tablets (MediaPipe FaceMesh)
        model = await faceLandmarksDetection.load(
            faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,
            { maxFaces: 1 }  // Solo detectar 1 rostro
        );
        
        console.log("✅ Modelo cargado correctamente!");
        isLoading = false;
    } catch (err) {
        console.error("🚨 Error al cargar el modelo:", err);
        alert("La IA no pudo cargarse. Recarga la página o usa otro dispositivo.");
        isLoading = false;
    }
}

// 4. Función para ANALIZAR EL ROSTRO
async function analyzeFace() {
    if (!model || isLoading) {
        alert("La IA aún no está lista. Espera unos segundos.");
        return;
    }

    try {
        console.log("🔍 Analizando rostro...");
        const faces = await model.estimateFaces(video);
        
        if (faces.length > 0) {
            // Extraer datos clave para medicina estética
            const landmarks = faces[0].scaledMesh;
            const wrinkles = calculateWrinkles(landmarks);  // Función personalizada
            const skinTone = getSkinTone(video);
            
            // Mostrar resultados (puedes personalizar esto)
            alert(`📊 Resultados:\n- Arrugas: ${wrinkles}%\n- Tono de piel: ${skinTone}`);
        } else {
            alert("No se detectó ningún rostro. Acércate a la cámara con buena luz.");
        }
    } catch (err) {
        console.error("🚨 Error al analizar:", err);
        alert("Error al procesar tu rostro. Intenta de nuevo.");
    }
}

// 5. Funciones auxiliares (personalízalas según necesites)
function calculateWrinkles(landmarks) {
    // Lógica simplificada: contar puntos en zona de arrugas (frente)
    const forehead = landmarks.slice(10, 20);
    return Math.floor((forehead.length / 10) * 100);
}

function getSkinTone(videoElement) {
    // Ejemplo básico (puedes implementar algo más avanzado)
    return ["Claro", "Medio", "Oscuro"][Math.floor(Math.random() * 3)];
}

// 6. Eventos y Inicialización
captureBtn.addEventListener('click', analyzeFace);

// Al cargar la página:
document.addEventListener('DOMContentLoaded', async () => {
    await startCamera();
    await loadModel();
});

    /* ===== ESTILOS PARA MENSAJES DE IA (AÑADIR AL FINAL) ===== */
/* Contenedor de resultados */
#resultText {
    transition: all 0.3s ease;
    min-height: 80px;
    padding: 15px;
    border-radius: 8px;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    margin-top: 10px;
}

/* Mensajes de error */
#resultText.error {
    background: #ffebee;
    border-left: 4px solid #f44336;
    color: #d32f2f;
}

/* Mensajes de éxito */
#resultText.success {
    background: #e8f5e9;
    border-left: 4px solid #4caf50;
    color: #2e7d32;
}

/* Cuenta regresiva */
#countdown {
    font-weight: bold;
    color: #007bff;
    font-size: 1.2em;
}

/* Botón de reintento */
#retryButton {
    padding: 8px 15px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    margin-top: 10px;
    cursor: pointer;
}

/* Loader de carga */
#loader {
    display: none; /* Oculto por defecto */
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 20px;
    border-radius: 10px;
    z-index: 1000;
    text-align: center;
}

/* Estilos profesionales */
.success {
    background: #e8f5e9;
    border-left: 4px solid #4caf50;
    padding: 15px;
    border-radius: 5px;
    margin: 10px 0;
}
.error {
    background: #ffebee;
    border-left: 4px solid #f44336;
    padding: 15px;
    border-radius: 5px;
}
.info {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
    padding: 15px;
    border-radius: 5px;
}
#loader {
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 20px;
    border-radius: 10px;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
